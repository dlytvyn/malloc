NAME		=	libft_malloc_$(HOSTTYPE).so
SYM_NAME	=	libft_malloc.so
CC			=	gcc
MKDIR		=	mkdir -p
RM			=	/bin/rm -rf

FLAGS		=	-Wall -Wextra -Werror

SRC_DIR		= 	sources/
INC_DIR		=	includes/
OBJ_DIR		=	objects/


LIBFT_DIR   = libft/
LIBFT_LIB	= $(LIBFT_DIR)libft.a
LIBFT_INC	= $(LIBFT_DIR)includes/


TEST_DIR	=	tests/

SRC_BASE	=	free.c\
				ft_itoa_base.c\
                malloc.c\
                malloc_add.c\
                realloc.c\
                show_alloc_mem.c\

TEST_BASE	= \

SRCS 		=	$(addprefix $(SRC_DIR), $(SRC_BASE))
OBJS		=	$(addprefix $(OBJ_DIR), $(SRC_BASE:.c=.o))

ifeq ($(HOSTTYPE), )
	HOSTTYPE := $(shell uname -m)_$(shell uname -s)
endif

all: $(OBJ_DIR) $(OBJS)
	@echo STARTED COMPILING
	@echo Compiling libft
	@make -C $(LIBFT_DIR)
	@echo Compiling dynamic library
	@$(CC) -shared -o $(NAME) $(OBJS) $(LIBFT_LIB)
	@rm -rf $(SYM_NAME)
	@ln -s $(NAME) $(SYM_NAME)
	@echo Compiling finished!


build-test:
	@$(MAKE) -C $(TEST_DIR)

fclean-test:
	@$(MAKE) fclean -C $(TEST_DIR)

re-test:
	@$(MAKE) re -C $(TEST_DIR)


$(OBJ_DIR):
	@mkdir -p $(OBJ_DIR)
	@mkdir -p $(dir $(OBJS))

$(OBJ_DIR)%.o: $(SRC_DIR)%.c | $(OBJR_DIR)
	@$(CC) $(FLAGS) -c $< -o $@\
		-I $(INC_DIR) \
		-I $(LIBFT_INC)

clean:
	@echo Cleaning objects
	@rm -rf  $(OBJ_DIR)
	@make -C $(LIBFT_DIR) clean
	@echo Cleaning finished

fclean: clean
	@echo FClean started
	@rm -f $(NAME)
	@rm -f $(SYM_NAME)
	@make -C $(LIBFT_DIR) fclean
	@echo FClean finished

re: fclean all

.PHONY: 	fclean clean re relib cleanlib fcleanlib

-include $(OBJS:.o=.d)